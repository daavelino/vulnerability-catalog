import argparse
import csv
from datetime import datetime
import json
import pprint
import re
import sys

def parseArgs():
    '''Return a dict() with the variables passed at stdin.'''
    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        description="Nessus cvs to Catalog json converter."
        )
    parser.add_argument('--not_accept_risks',action='store_true',help="If invoked, all risks are set to 'Not evaluated' value.")
    parser.add_argument('--csvfile',nargs='?',required=True,help="The Nessus 7.1.0 csv file.")
    parser.add_argument('--jsonfile',nargs='?',help="The generated json file to import at Catalog.")
    parser.add_argument('-o','--owner',nargs='?',default='Owner',required=True,help="The target system's owner/responsible.")
    parser.add_argument('-m','--email',nargs='?',default='owner@mycompany.com',required=True,help="The owner's email. Ex: owner@company.com")
    parser.add_argument('-e','--environment',nargs='?',default='Nessus',required=True,help="Ex: Datacenter, Local server, Cloud, etc...")
    parser.add_argument('-p','--perimeter',nargs='?',required=True,help="Internal/External. The target system's location.")
    parser.add_argument('-t','--technology',nargs='?',required=True,help="Ex: ASP.NET, Joomla, PHP, Java, Apache, etc.")
    parser.add_argument('-st','--system_type',nargs='?',required=True,help="Ex:Web application, Windows Server, Linux Server, Mobile application, etc.")
    parser.add_argument('-i','--identification_date',nargs='?',required=True,help="When the vulnerability was discovered/reported.")
    parser.add_argument('-r','--remediation_deadline',nargs='?',required=True,help="Set a feasible deadline to fix all the vulnearabilities.")
    parser.add_argument('-s','--status',nargs='?',required=True,help="Solved|Notified|Accepted|Mitigated|Not identified")
    parser.add_argument('--ignore_duplicated',action='store_true',help="If invoked, ignore duplicated results.")
    parser.add_argument('--ignore_hosts',nargs='*',help="Do not include these hosts in the output.")

    return vars(parser.parse_args())

def checkArgs(args):
    ''' 
    Check if the dict() returned by parseArgs() 
    contains the correct parameters syntax and values,
    according to the project's model.
    '''
    perimeter = ['External','Internal']
    status = ['Solved','Notified','Accepted','Mitigated','Not identified']
    EMAIL_REGEX = re.compile(r"[^@\s]+@[^@\s]+\.[a-zA-Z0-9]+$")
    DATE_REGEX = re.compile(r"[0-9][0-9][0-9][0-9]")
    
    if args['perimeter'] not in perimeter:
        print('perimeter (-p) values must be: ')
        print(*perimeter)
        print('Exiting.')
        sys.exit(1)
    if args['status'] not in status:
        print('status (-s) values must be: ')
        print(*status)
        print('Exiting.')
        sys.exit(1)
    if not EMAIL_REGEX.match(args['email']):
        print('email (-m) format mismatch. Exiting.')
        sys.exit(1)
    try:
        datetime.strptime(args['identification_date'], '%Y-%m-%d')
    except:
        print('identification_date (-i) format mismatch. Exiting.')
        sys.exit(1)
    try:
        datetime.strptime(args['remediation_deadline'], '%Y-%m-%d')
    except:
        print('remediation_deadline (-r) format mismatch. Exiting.')
        sys.exit(1)

def generateData(args, filename):
    ''' 
    Return the JSON data to be imported at Catalog. 
    args are the parsed arguments dict() by parseArgs and 
    filename is the input file name to read Nessus csv data.
    '''

    vulnerability_list = list()
    
    with open(filename) as cvsfile:
        data = csv.DictReader(cvsfile)
        for row in data:
            if args['ignore_hosts']:
                if row['Host'] in args['ignore_hosts']:
                    continue
            vulnerability = {
                "model": "catalog.vulnerability",
                "fields": {
                "system": None,
                "owner": args['owner'],
                "owner_email": args['email'],
                "environment": args['environment'],
                "perimeter": args['perimeter'],
                "technology": args['technology'],
                "system_type": args['system_type'],
                "vulnerability": None,
                "category": "",
                "synopsis": None,
                "cvss_value": None,
                "identification_date": args['identification_date'],
                "reporter": "Nessus Vulnerability Scanner",
                "risk": None,
                "observation": None,
                "remediation": None,
                "risk_acceptance_reason": "",
                "remediation_deadline": args['remediation_deadline'],
                "status": args['status'],
                "report_file": filename,
                "report_page": 0
                }
            }
            if args['not_accept_risks'] == True:
                vulnerability['fields']['risk'] = 'Not evaluated'
            else:
                if row['Risk'] == 'None':
                    vulnerability['fields']['risk'] = 'Not evaluated'
                else:
                    vulnerability['fields']['risk'] = row['Risk']
            vulnerability['fields']['system'] = row['Host']
            vulnerability['fields']['vulnerability'] = row['Name']
            vulnerability['fields']['synopsis'] = row['Synopsis']
            if row['CVSS']:
                vulnerability['fields']['cvss_value'] = float(row['CVSS'])
            else:
                vulnerability['fields']['cvss_value'] = 0
            vulnerability['fields']['observation'] = row['Description']
            vulnerability['fields']['remediation'] = row['Solution'] + row['See Also']

            if None in vulnerability['fields'].values():
                print ("Error. Some key fields are missing. Please check CSV data. Exiting.")
                sys.exit(1)
            else:
                vulnerability_list.append(vulnerability)

    if args['ignore_duplicated'] == True:
        ''' 
        A variation of 
        https://stackoverflow.com/questions/9427163/remove-duplicate-dict-in-list-in-python 
        '''
        control = set()
        unique_list = []
        for i in vulnerability_list:
            i['fields'] = tuple(i['fields'].items())
            t = tuple(i.items())
            i['fields'] = dict(i['fields'])
            if t not in control:
                control.add(t)
                unique_list.append(i)
        return unique_list

    return vulnerability_list

if __name__=='__main__':
    args = parseArgs()
    checkArgs(args)
    csvfile = args['csvfile']
    result = generateData(args, csvfile)

    if args['jsonfile'] is not None:
        result = json.dumps(result)
        jsonfile = args['jsonfile']
        f = open(jsonfile, 'w')
        f.write(result)
        f.close()
    else:
        pprint.pprint(result)

    sys.exit(0)
