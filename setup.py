########
#### setup.py: script to build and help development of the Vulnerability catalog.
#### Date: 2018-06-04
#### Version: 2.0.0rc1
#### Author: Daniel Avelino https://daavelino.github.io
########

import platform
import sys
import shutil
import os
import subprocess
# import secrets # Will be imported after check if python version is > 3.6.
import getpass
import re
import json
import pprint

from pathlib import Path

global MINIMAL_PYTHON_VERSION
global PROJECT_NAME
global APP_NAME
global HOME_DIR

MINIMAL_PYTHON_VERSION = (3, 6, 0)
PROJECT_NAME = 'base'
APP_NAME = 'catalog'
HOME_DIR = Path(os.getcwd())
BASE_DIR = Path(os.path.join(HOME_DIR, PROJECT_NAME,))


def tuple_comparison(a:tuple, b:tuple):
    '''
    Evaluate tuples as an ordered list of numbers 
    and returns True if a >= b
    '''
    control = False
    for i in range(0, len(b)):
        if int(a[i]) > int(b[i]):
            control = True
            break
        elif int(a[i]) < int(b[i]):
            control = False
            break
        else:
            control = True
    return(control)

######## System properties:
def get_environment():
    '''Returns a dictionary with OS system and version.'''
    env = dict()
    env['system'] = platform.system()
    if env['system'] == 'Linux':
        env['system version'] = platform.linux_distribution()
    if env['system'] == 'Windows':
        env['system version'] = platform.linux_distribution()
    return(env)

def check_parameters():
    allowed_params = {
        'build': "setup and builds the project from the scratch (with test data).",
        'build-only': "Just build project, without load data or create users.",
        'build-novenv': "same as 'build', but do not uses Python venv.",
        'clean': "remove all project related files.",
        'createstartscript': "creates the platform specific Catalog start script",
        'createsuperuser': "creates an admin user to the catalog.",
        'createvenv': "creates a functional Python's Virtual Environment at current directory.",
        'database': "Setup an alternative database instead of default sqlite.",
        'deep-clean': "remove all project related files and venv structure.",
        'loadtestdata': "Add some test data into database.",
        'templates': "updates project's Templates, forms and static files only.",
        'urlsviews': "updates project's Urls and Views only."   
    }
    # one and only one allowed parameter has to be passed.
    if (len(sys.argv) == 2) and (sys.argv[1] in allowed_params.keys()):
        param = sys.argv[1] # Because argv[0] is the file name.
        return param
    else:
        print('\nUsage:', sys.argv[0], '<options>, where <options> are:\n')
        for i in allowed_params.items():
            print('  ' + i[0] + ':    ' + i[1])
        print('\nExiting.')
        sys.exit(1)

def guarantee_venv():
    ''' Guarantee the Python's virtual environment presence.'''
    venv_dir = Path('venv',)
    env = get_environment()
    param = check_parameters()
    data = None
    if not venv_dir.is_dir():
        if env['system'] == 'Linux':
            filename = 'runInstall.sh'
            data = '#!/bin/bash\n\n' \
                 + 'mkdir venv\n' \
                 + 'python -m venv venv\n' \
                 + 'python setup.py' + ' ' + param
        if env['system'] == 'Windows':
            filename = 'runInstall.bat'
            data = '@echo off\n\n' \
                 + 'mkdir venv\n' \
                 + 'python -m venv venv\n' \
                 + 'python setup.py' + ' ' + param
    else:
        if not 'VIRTUAL_ENV' in os.environ.keys(): # venv is not loaded:
            if env['system'] == 'Linux':
                filename = 'runInstall.sh'
                data = '#!/bin/bash\n\n' \
                     + 'source venv/bin/activate\n' \
                     + 'python setup.py' + ' ' + param \
                     + '\n'
            if env['system'] == 'Windows':
                filename = 'runInstall.bat'
                data = '@echo off\n\n' \
                     + 'call venv\\Scripts\\Activate.bat\n' \
                     + 'python setup.py' + ' ' + param \
                     + '\n'
        else:
            pass
    if data is not None:
        f = open(filename, 'w')
        f.write(data)
        f.close()
        if env['system'] == 'Linux':
            os.chmod(filename, 0o755)
            instruction = './' + filename
        if env['system'] == 'Windows':
            instruction = filename

        os.system(instruction)
        if os.path.isfile(filename):
            os.remove(filename)
        sys.exit(0)
    
def check_python_version():
    '''
    Ensures that Python version is greater than MINIMAL_PYTHON_VERSION
    It also loads secrets module, new in Python 3.6 version. 
    https://docs.python.org/3/library/secrets.html
    '''
    #### Checking installed Python version:
    python_version = (sys.version_info.major, sys.version_info.minor, \
                      sys.version_info.micro)
    control = tuple_comparison(python_version, MINIMAL_PYTHON_VERSION)
    if not control:
        print('\n[Warning]    Missing Python ', end='')
        for i in range(0, len(MINIMAL_PYTHON_VERSION)):
            print(str(MINIMAL_PYTHON_VERSION[i]) \
              + '.', end='' )
        print(' (or greater).\n')
        print('Please, get it at (https://www.python.org/downloads/).\nExiting.\n')
        sys.exit(1)
    else:
        global secrets
        import secrets # secrets is New in Python 3.6.

def check_pip_version():
    '''Check if pip is installed. If not, install it properly.'''
    try:
        import pip
    except ImportError: # Exit, since it is a required dependency.
        print('\n[Warning]    Missing pip.\n')
        print('Please, install it first (https://pip.pypa.io).\nExiting.\n')
        sys.exit(1)

def check_requirements():
    '''Ensure requirements.txt is satisfied.'''
    os.system('pip install -r requirements.txt')
    print('Done.')

def check_system_reqs():
    check_python_version()
    check_pip_version()
    check_requirements()

def cleaning_old_stuff(control):
    '''Cleaning out old project structure'''
    env = get_environment()
    print('Cleaning out old project structure...')
    target = Path(PROJECT_NAME)
    if target.is_dir():
        shutil.rmtree(target)
    if control == 'deep-clean':
        if 'venv' in sys.prefix: # venv is loaded:
            if env['system'] == 'Linux':
                #os.system('deactivate')
                # it will not work since deactivate is defined at python's parent process.
                pass
            if env['system'] == 'Windows':
                os.system('venv\Scripts\deactivate.bat')
        target = Path(os.path.join(os.path.curdir, 'venv'))
        if target.is_dir():
            shutil.rmtree(target)
    if env['system'] == 'Linux':
        filename = 'run.sh'
    if env['system'] == 'Windows':
        filename = 'run.bat'
    if os.path.isfile(filename):
        os.remove(filename)
    print('Done.')
######## End of System properties.

######## Django properties:
def start_django_project():
    '''Starts Django's project creation.'''
    print('Starting creating Django structure...')
    os.system('django-admin startproject' + ' ' + PROJECT_NAME)
    os.chdir(BASE_DIR)
    os.system('python manage.py startapp' + ' ' + APP_NAME)
    os.chdir(HOME_DIR)
    print('Done.')

def importing_settings():
    '''
    Applying settings from 
    metadata/settings/settings.py
    into project's structure
    '''
    print('Copy settings.py from metadata...')
    src_path = os.path.join(os.path.curdir, \
                            'metadata', \
                            'settings', \
                            'settings.py')
    dst_path = os.path.join(os.path.curdir, 'base', 'base', 'settings.py')
    shutil.copy(src_path, dst_path)
    print('Done.')

def set_datamodel():
    '''
    Applying catalog data models from
    metadata/models/catalog/models.py and
    metadata/models/catalog/admin.py 
    into project's structure.
    '''
    env = get_environment()
    print('Copy data models...')
    src_path = os.path.join(os.path.curdir, \
                            'metadata', \
                            'models', \
                            'catalog', \
                            'models.py')
    dst_path = os.path.join(os.path.curdir, 'base', 'catalog', 'models.py')
    shutil.copy(src_path, dst_path)
    src_path = os.path.join(os.path.curdir, \
                            'metadata', \
                            'models', \
                            'catalog', \
                            'admin.py')
    dst_path = os.path.join(os.path.curdir, 'base', 'catalog', 'admin.py')
    shutil.copy(src_path, dst_path)
    print('Done.')
    print('Applying data models...')
    os.chdir(PROJECT_NAME)
    os.system('python manage.py makemigrations' + ' ' + APP_NAME)
    os.system('python manage.py sqlmigrate' \
              + ' ' \
              + APP_NAME \
              + ' ' \
              + '0001')
    os.system('python manage.py migrate')
    os.chdir(BASE_DIR)
    print('Done.')

def set_urls():
    '''
    Applying settings from 
    metadata/urls/catalog/urls.py and
    metadata/urls/catalog/urls.py
    into project's structure.
    '''
    print('Setting Urls...')
    os.chdir(HOME_DIR)
    src_path = os.path.join(os.path.curdir, \
                            'metadata', \
                            'urls', \
                            'admin', \
                            'urls.py')
    dst_path = os.path.join(os.path.curdir, 'base', 'base', 'urls.py')    
    shutil.copy(src_path, dst_path)
    src_path = os.path.join(os.path.curdir,\
                            'metadata', \
                            'urls', \
                            'catalog', \
                            'urls.py')
    dst_path = os.path.join(os.path.curdir, 'base', 'catalog', 'urls.py')
    shutil.copy(src_path, dst_path)
    print('Done.')

def set_views():
    '''
    Applying settings from 
    metadata/views/catalog/* 
    into project's structure.
    '''
    print('Setting Views...')
    os.chdir(HOME_DIR)
    src_path = os.path.join(os.path.curdir,'metadata', \
                            'views', \
                            'catalog', )
    dst_path = os.path.join(os.path.curdir, \
                            'base', 
                            'catalog', )
    for i in os.listdir(src_path):
        fsrc = os.path.join(src_path, i)
        shutil.copy(fsrc, dst_path)
    print('Done.')

def set_templates():
    '''
    Applying settings from 
    metadata/templates/catalog/*
    into project's structure.
    '''
    print('Setting templates...')
    os.chdir(HOME_DIR)
    files = [
        'add.html',
        'delete.html',
        'detail.html',
        'fastupdate.html',
        'home.html',
        'index.html',
        'panorama.html',
        'search.html',
        'update.html',
        'upload.html'
        ]
    tmpl_srcdir = os.path.join(os.path.curdir, \
                               'metadata', \
                               'templates', \
                               'catalog',)
    tmpl_dstdir = os.path.join(os.path.curdir, \
                               'base', \
                               'catalog', \
                               'templates', \
                               'catalog',)
    tmpl_main_path = os.path.join(tmpl_srcdir, 'tmpl_main.html')
    # ensuring tmpl_dstdir exists:
    if not Path(tmpl_dstdir).is_dir():
        os.makedirs(tmpl_dstdir)
    # reading tmpl_main.html data content:
    fd = open(tmpl_main_path, 'rb') # 'rb' to avoid encoding problems.
    tmpl_main_data = fd.read()
    fd.close()
    for i in files:
        tmp = ''
        tmp = i.split('.')
        context = tmp[0]
        # the template files with custom content are <context_custom_content.html>:
        content_file = context + '_custom_content.html'
        content_file = os.path.join(tmpl_srcdir, content_file)
        fd = open(content_file, 'rb') # 'rb' to avoid encoding problems.
        custom_data = fd.read()
        fd.close()
        # all these templates are wrapped to tmpl_main.html (tmpl_main_data)
        tmpl_final_file = os.path.join(tmpl_dstdir, i)
        fd = open(tmpl_final_file, 'wb') # 'wb' to avoid encoding problems.
        data = tmpl_main_data.replace(b'__INSERT_CUSTOM_CONTENT__', \
                                      bytes(custom_data))
        fd.write(data)
        fd.close()

        '''
        Put risk/cvss calculators into Add form templates.
        It will look for the __RISK_CALCULATOR__ and 
        __CVSS_CALCULATOR__ tags.
        '''
        calculators = {
            'cvss': 'cvss_custom_content.html',
            'risk': 'risk_custom_content.html'
            }
        modals = {
            '1': 'tmpl_calculators_modal.html'
        }
        templates_with_calculator = [
            'add.html',
            'update.html',
            'fastupdate.html']
    for i in templates_with_calculator:
        #### Insert [risk,cvss]_custom_content.html
        risk_calc_path = os.path.join(tmpl_srcdir, calculators['risk'])
        cvss_calc_path = os.path.join(tmpl_srcdir, calculators['cvss'])
        modal_path = os.path.join(tmpl_srcdir, modals['1'])
        target_template = os.path.join(tmpl_dstdir, i)

        fd = open(risk_calc_path, 'rb')
        risk_calc_data = fd.read()
        fd.close()
        fd = open(cvss_calc_path, 'rb')
        cvss_calc_data = fd.read()
        fd.close()
        fd = open(modal_path, 'rb')
        modal_data = fd.read()
        fd.close()
        fd = open(target_template, 'rb')
        target_data = fd.read()
        fd.close()

        if (b'__CALCULATORS_MODAL__' in target_data):
            target_data = target_data.replace(b'__CALCULATORS_MODAL__',bytes(modal_data))
        if (b'__RISK_CALCULATOR__' in target_data):
            target_data = target_data.replace(b'__RISK_CALCULATOR__',bytes(risk_calc_data))
        if (b'__CVSS_CALCULATOR__' in target_data):
            target_data = target_data.replace(b'__CVSS_CALCULATOR__',bytes(cvss_calc_data))
                
        fd = open(target_template, 'wb') # 'wb' to avoid encoding problems.
        fd.write(target_data)
        fd.close()            
    print('Done.')

def set_login_template():
    print('Setting login template...')
    os.chdir(HOME_DIR)
    tmpl_srcdir = os.path.join(os.path.curdir, \
                               'metadata', \
                               'templates', \
                               'catalog', \
                               'login.html')
    tmpl_dstdir = os.path.join(os.path.curdir, \
                               'base', \
                               'catalog', \
                               'templates', \
                               'catalog',)
    if not Path(tmpl_dstdir).is_dir():
        os.makedirs(tmpl_dstdir)
    shutil.copy(tmpl_srcdir, tmpl_dstdir)
    print('Done.')

def set_admin_template():
    # we just need to put static files in the right place.
    print('Setting admin template confs:')
    os.chdir(HOME_DIR) 
    os.chdir(BASE_DIR)
    os.system('python manage.py collectstatic --noinput')
    os.chdir(HOME_DIR)  
    print('Done.')

def set_forms():
    print('Setting Forms...')
    os.chdir(HOME_DIR)
    src_path = os.path.join(os.path.curdir,'metadata', \
                            'forms', \
                            'catalog', )
    dst_path = os.path.join(os.path.curdir, \
                            'base', \
                            'catalog', )
    for i in os.listdir(src_path):
        fsrc = os.path.join(src_path,i)
        shutil.copy(fsrc, dst_path)
    os.chdir(HOME_DIR)
    print('Done.')

def set_static_files():
    print('Setting Static Files...')
    os.chdir(HOME_DIR)
    src_path = os.path.join(os.path.curdir, \
                            'metadata', \
                            'static', \
                            'catalog', )
    dst_path = os.path.join(os.path.curdir, \
                            'base', \
                            'catalog', \
                            'static', )
    if Path(dst_path).is_dir():
        shutil.rmtree(dst_path)
    shutil.copytree(src_path, dst_path)
    os.chdir(HOME_DIR) 
    print('Done.')

def deployment_checklist():
    print('Deployment checklist...')
    # https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/
    key = secrets.token_hex(64)
    src_path = os.path.join(HOME_DIR, \
                            'metadata', \
                            'settings', \
                            'settings.py')
    dst_path = os.path.join(HOME_DIR, 'base', \
                            'base', \
                            'settings.py')
    # Open template file and copy its content to avoid data appending:
    fd = open(src_path, 'r')
    data = fd.read()
    fd.close()
    # https://goo.gl/PtCXNN
    fd = open(dst_path, 'w')
    data = data.replace('__SECRET_KEY__', key)
    fd.write(data)
    fd.close()
    print('Done.')

def load_test_data():
    print('Loading data from test/data-md.json')
    env = get_environment()
    CURR_DIR = os.path.curdir
    os.chdir(HOME_DIR)
    src_path = os.path.join(os.path.curdir, \
                            'test', \
                            'data', \
                            'data-md.json')
    fixturename_path = os.path.join(HOME_DIR, \
                                    'base', \
                                    'catalog', \
                                    'fixturename',)   
    if not Path(fixturename_path).is_dir():
        os.mkdir(fixturename_path)
    shutil.copy(src_path, fixturename_path)
    os.chdir(PROJECT_NAME)
    fixturename_file = os.path.join(os.path.pardir, \
                                    fixturename_path, \
                                    'data-md.json')
    os.system('python manage.py loaddata' + ' ' + fixturename_file)
    os.chdir(CURR_DIR)  
    print('Done.')

def load_default_risk_questions():
    print('Loading default Risk Questions...')
    CURR_DIR = os.path.curdir
    env = get_environment()
    os.chdir(HOME_DIR)
    src_path = os.path.join(os.path.curdir, \
                            'test', \
                            'data', \
                            'riskQuestions.json')
    fixturename_path = os.path.join(HOME_DIR, \
                                    'base', \
                                    'catalog', \
                                    'fixturename',)    
    if not Path(fixturename_path).is_dir():
        os.mkdir(fixturename_path)
    shutil.copy(src_path, fixturename_path)
    os.chdir(PROJECT_NAME)
    fixturename_file = os.path.join(os.path.pardir, \
                                    fixturename_path, \
                                    'riskQuestions.json')
    os.system('python manage.py loaddata' + ' ' + fixturename_file)
    os.chdir(CURR_DIR)  
    print('Done.')

def create_superuser():
    env = get_environment()
    os.chdir(BASE_DIR)
    os.system('python manage.py createsuperuser')
    os.chdir(HOME_DIR)

def set_database():
    # https://docs.djangoproject.com/en/2.0/ref/settings/#databases
    env = get_environment()
    default_database = {
        'default': {
            'ENGINE': '',
            'NAME': '',
            'USER': '',
            'PASSWORD':'',
            'HOST': '',
            'PORT':''
        }
    }
    available_databases = {
    #   'key': ['DB friendly name', 'ENGINE', 'NAME', 'USER', 'PASS', HOST', 'PORT', 'db binding']
        '1': ['PostgreSQL', 'django.db.backends.postgresql', '', '', '', '127.0.0.1', '5432', 'psycopg2'],
        '2': ['MySQL', 'django.db.backends.mysql', '', '', '', '127.0.0.1', '3306', 'mysqlclient'],
        '3': ['Oracle', 'django.db.backends.oracle', '', '', '', '127.0.0.1', '1521', 'cx_Oracle'],
        '4': ['SQLite3', 'django.db.backends.sqlite3', "os.path.join(BASE_DIR, 'db.sqlite3')", '', '', '', '', None]
    }
    print('\nAvailable databases:\n')
    for i in available_databases.keys():
        print(i, '-', available_databases[i][0])    
    chosen_db = input('\nWhich one would you like to use? ')
    while chosen_db not in available_databases.keys():
        chosen_db = input('Choose one of the numbers above: ')
    print('\nLet us set', available_databases[chosen_db][0], 'database:')
    default_database['default']['ENGINE'] = available_databases[chosen_db][1]
    default_database['default']['NAME'] = input('Database name: ' \
                                                + available_databases[chosen_db][2]) \
                                                or available_databases[chosen_db][2]
    default_database['default']['USER'] = input('Database user name: ' \
                                                + available_databases[chosen_db][3]) \
                                                or available_databases[chosen_db][3]
    default_database['default']['PASSWORD'] = getpass.getpass('User password:')
    pwd_verify = getpass.getpass('User password (again):')
    while default_database['default']['PASSWORD'] != pwd_verify:
        print('Password mismatch.')
        default_database['default']['PASSWORD'] = getpass.getpass('User password:')
        pwd_verify = getpass.getpass('User password (again):')
    default_database['default']['HOST'] = input('Database Host address (' \
                                                + available_databases[chosen_db][5] \
                                                + '):') \
                                                or available_databases[chosen_db][5]
    default_database['default']['PORT'] = input('Database Port (' \
                                                + available_databases[chosen_db][6] \
                                                + '):') \
                                                or available_databases[chosen_db][6]
    #### Altering settings.py DATABASE entry:
    settings_path = os.path.join(os.curdir, 'base', 'base', 'settings.py')
    f = open(settings_path, 'r')
    data = f.read()
    f.close()
    regex = r"DATABASES = (.*)}\n" # Thanks to https://regex101.com/r/lH0jK9/1
    subst = json.dumps(default_database, indent=4)
    subst = subst.replace('"', '\'')
    subst = 'DATABASES = ' + subst + '\n'
    result = re.sub(regex, subst, data, 0, re.DOTALL)
    ### Since 'NAME': value is a path, it could not be treated as a string.
    if available_databases[chosen_db][0] == 'SQLite3':
        result = result.replace("'NAME': 'os.path.join(BASE_DIR, 'db.sqlite3')',", \
                                "'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),")
    f = open(settings_path, 'w')
    f.write(result)
    f.close()
    #### Check if Database bindings is installed:
    db_binding = available_databases[chosen_db][7]
    try:
        import db_binding
    except ImportError:          
        os.system('pip install ' + db_binding)
    set_datamodel()
      
def create_startscripts():
    env = get_environment()
    if env['system'] == 'Linux':
        filename = 'run.sh'
        f = open(filename, 'w')
        data = '#!/bin/bash\n\n' \
             + 'ADDRESS=""\n' \
             + 'if [[ $1 ]]; then\n' \
             + '  ADDRESS=$1\n' \
             + 'fi\n' \
             + 'if [[ ! -d ./venv ]]; then\n' \
             + '  echo "Missing venv structure. Creating..."\n' \
             + '  mkdir venv\n python3 -m venv venv\n' \
             + '  python -m venv venv\n' \
             + '  source venv/bin/activate\n\n' \
             + '  pip install -r requirements.txt\n' \
             + 'else\n' \
             + '  source venv/bin/activate\n\n' \
             + 'fi\n' \
             + 'cd base\n' \
             + 'python manage.py runserver\n' \
             + 'cd ..\n'
        f.write(data)
        f.close()
        os.chmod(filename, 0o755)
    if env['system'] == 'Windows':
        filename = 'run.bat'
        f = open(filename, 'w')
        data = '@echo off\n\n' \
             + 'set ADDRESS=""\n' \
             + 'if exist %1 (set ADDRESS=%1)\n' \
             + 'if not exist venv (\n' \
             + '  echo "Missing venv structure. Creating..."\n' \
             + '  mkdir venv\n' \
             + '  python -m venv venv\n' \
             + '  call venv\\Scripts\\activate.bat\n' \
             + '  pip install -r requirements.txt\n' \
             + ') else (\n' \
             + '  call venv\\Scripts\\activate.bat\n' \
             + ')\n' \
             + 'cd base\n' \
             + 'python manage.py runserver %ADDRESS%\n' \
             + 'cd ..\n'
        f.write(data)
        f.close()


def run():
    check_python_version()
    param = check_parameters()

    if param == 'build':
        check_parameters()
        get_environment()
        guarantee_venv()
        check_system_reqs()
        cleaning_old_stuff('none')
        start_django_project()
        importing_settings()
        set_datamodel()
        set_urls()
        set_views()
        set_templates()
        set_login_template()
        set_forms()
        set_static_files()
        set_admin_template()
        load_default_risk_questions()
        deployment_checklist()
        create_superuser()
        create_startscripts()

    if param == 'build-only':
        check_parameters()
        get_environment()
        guarantee_venv()
        check_system_reqs()
        cleaning_old_stuff('none')
        start_django_project()
        importing_settings()
        set_datamodel()
        set_urls()
        set_views()
        set_templates()
        set_login_template()
        set_forms()
        set_static_files()
        set_admin_template()
        load_default_risk_questions()
        deployment_checklist()
        create_startscripts()

    if param == 'build-novenv':
        check_parameters()
        get_environment()
        guarantee_venv()
        check_system_reqs()
        cleaning_old_stuff('none')
        start_django_project()
        importing_settings()
        set_datamodel()
        set_urls()
        set_views()
        set_templates()
        set_login_template()
        set_forms()
        set_static_files()
        set_admin_template()
        load_default_risk_questions()
        deployment_checklist()
        create_superuser()
        
    if param == 'clean':
        cleaning_old_stuff('none')
    
    if param == 'createsuperuser':
        guarantee_venv()
        create_superuser()

    if param == 'database':
        guarantee_venv()
        set_database()

    if param == 'deep-clean':
        cleaning_old_stuff('deep-clean')

    if param == 'createvenv':
        guarantee_venv()

    if param == 'templates':
        guarantee_venv()
        set_templates()
        set_login_template()
        set_forms()
        set_static_files()
        set_admin_template()

    if param == 'urlsviews':
        guarantee_venv()
        set_urls()
        set_views()
        
    if param == 'loadtestdata':
        guarantee_venv()
        load_test_data()

    if param == 'createstartscript':
        guarantee_venv()
        create_startscripts()

run()
