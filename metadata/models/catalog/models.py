from django.db import models
from datetime import date, timedelta

PERIMETER_CHOICES = (
    ('Internal', 'Internal'),
    ('External', 'External'),
)

RISK_CHOICES = (
    ('High', 'High'),
    ('Medium', 'Medium'),
    ('Low', 'Low'),
)

STATUS_CHOICES = (
    ('Solved', 'Solved'),
    ('Notified', 'Notified'),
    ('Accepted', 'Accepted'),
    ('Mitigated', 'Mitigated'),
    ('Not identified', 'Not identified'),
)

class Vulnerability(models.Model):
    #### Vulnerability fields:
    system = models.CharField(max_length=256, blank=False, \
        help_text="<span class='text-muted'>The system presenting the vulnerability.</span>")
    system_type = models.CharField(max_length=256, blank=False, \
        help_text="<span class='text-muted'>Ex: WEB application, Windows Server, Linux Server, Mobilie application, etc.</span>")
    technology = models.CharField(max_length=256, blank=False, \
        help_text="<span class='text-muted'>Ex: ASP.NET, Joomla, PHP, Java, Apache, etc.</span>")
    environment = models.CharField(max_length=64, blank=False, \
        help_text="<span class='text-muted'>Ex: Datacenter, Local server, Cloud, etc.</span>")
    perimeter = models.CharField(max_length=8, blank=False, \
        default='Unspecified', choices=PERIMETER_CHOICES)
    owner = models.CharField(max_length=256, blank=False, \
        help_text="<span class='text-muted'>The system's owner/responsible.</span>")
    owner_email = models.EmailField(max_length=64, blank=False)
    vulnerability = models.CharField(max_length=512, blank=False, \
        help_text="<span class='text-muted'>The vulnerability name, as reported by the researchers.</span>")
    synopsis = models.CharField(max_length=1024, default="", blank=False, \
        help_text="<span class='text-muted'>A short description of the vulnerability. Hint: try to focus in the risks associated with the vulnerability.</span>")
    category = models.CharField(max_length=512, blank=True, default="", \
        help_text="<span class='text-muted'><strong>Optional</strong>. For instance, refer to <a target='_blank' href='https://www.owasp.org/index.php/Category:Vulnerability'>OWASP</a> for examples of some categories. But, feel free to set your own.</span>")
    identification_date = models.DateField(blank=False, \
        help_text="<span class='text-muted'>When vulnerability was discovered/reported.</span>" )
    remediation_deadline = models.DateField(blank=False, \
        help_text="<span class='text-muted'>Set a feasible deadline to fix the vulnerability.</span>")
    remediation = models.CharField(max_length=1024, blank=True, default="", \
        help_text="<span class='text-muted'><strong>Optional</strong>. The remediation intented to fix the vulnerability.</span>")
    status = models.CharField(max_length=16, blank=False, choices=STATUS_CHOICES)
    observation = models.CharField(max_length=4096, blank=True, default="", \
        help_text="<span class='text-muted'><strong>Optional</strong>. Any observation pointed by the researcher when comment this vulnerability.</span>")
    risk = models.CharField(max_length=6, choices=RISK_CHOICES, \
        help_text="<span class='text-muted'><small><a href='/catalog/resources/risk/' target='_blank' class='btn btn-outline-info btn-sm' type='button'>Calculator</a></small></span>")
    risk_vector = models.CharField(default="", blank=True, max_length=64, \
        help_text="<span class='text-muted'><strong>Optional</strong>. The risk vector as indicated by Risk calculator.</span>")
    risk_acceptance_reason = models.CharField(max_length=4096, blank=True, default="", \
        help_text="<span class='text-muted'><strong>Optional</strong>, but important if you decide to accept the associated risks.</span>")
    cvss_value = models.FloatField(blank=False, \
        help_text="<span class='text-muted'><small><a href='/catalog/resources/cvss/' target='_blank' class='btn btn-outline-info btn-sm' type='button'>Calculator</a></small></span>")
    cvss_vector = models.CharField(default="", blank=True, max_length=64, \
        help_text="<span class='text-muted'><strong>Optional</strong>. The CVSS 3.0 Vector string.</span>")
    reporter = models.CharField(max_length=64, default="", blank=True, \
        help_text="<span class='text-muted'><strong>Optional</strong>. The company, research team or pentester which found the vulnerability.</span>")
    report_file = models.CharField(max_length=256, default="", blank=True, \
        help_text="<span class='text-muted'><strong>Optional</strong>. The report file for further reference.</span>")
    report_page = models.IntegerField(default=0, blank=True, \
        help_text="<span class='text-muted'><strong>Optional</strong>. The report page number which describes the vulnerabity.</span>")

    def remediation_time_remaining(self):
        """ Count the remaining time between the remediation deadline and now."""
        """ Notice that, if it returns a negative number, remediation_deadline has
            passed."""
        now = date.today()
        tmp = Vulnerability.objects.get(pk=self.id)
        deadline = tmp.remediation_deadline
        elapsed_time = deadline - now

        if elapsed_time < timedelta(0):
            return(timedelta(0).days)
        else:
            return (elapsed_time.days)

    class Meta:
        verbose_name_plural = "vulnerabilities"
        permissions = (
            ("read", "Can read content"),
        )

class RiskQuestions(models.Model):
    #### Vulnerability fields:
    position = models.IntegerField(unique=True, blank=False, \
        help_text="<span class='text-muted'>The question position number (1, 2, 3, etc...)</span>")
    question = models.CharField(unique=True, max_length=256, blank=False, \
        help_text="<span class='text-muted'>The question itself.</span>")
    question_shortname = models.CharField(unique=True, max_length=6, blank=False, \
        help_text="<span class='text-muted'>A short name to identify this question when create the Risk Vector.</span>")
    weight = models.FloatField(blank=False, default=1, \
        help_text="<span class='text-muted'>Add a float number if you need to ponderate this question value.</span>")

    class Meta:
        verbose_name_plural = "risk questions"
        ordering = ['position']
