import json
import csv

from django.views.generic import TemplateView
from django.http import HttpRequest, HttpResponse
from django.http import HttpResponseForbidden, HttpResponseRedirect
from django.urls import reverse
from django.shortcuts import render
from django.contrib.auth.decorators import login_required, permission_required
from django.utils.decorators import method_decorator

from django.contrib.contenttypes.models import ContentType
from django.contrib.sessions.models import Session
from django.contrib.auth.models import User, Group, Permission
from .models import Vulnerability, RiskQuestions

login_url='catalog:login'
success_url='catalog:index'
decorators = [login_required(login_url='catalog:login')]


def recoverData(modelName, data):
    ''' 
    Recover backuped data from a given model. 
    Returns 0, if data was salved at database or 1 if
    data doesn't correspond to database schema.
    '''
    model_fields = modelName._meta.get_fields()
    model_name_str = str(modelName._meta)
    allowed_fields = [i.name for i in model_fields]
    fields = list()

    json_data = json.loads(data)
    for i in json_data:
        if i['model'] == model_name_str:
            tmp = i['fields']
            if set(tmp.keys()) > set(allowed_fields):
                return 1
            else:
                fields.append(tmp)

    for i in fields:
        model_data = modelName(**i)
        model_data.save()
    return 0

#########################################################################
#### Warning: requires catalog.add_vulnerability user permission.
#########################################################################
@method_decorator(decorators, name='dispatch')
@method_decorator(permission_required('catalog.add_vulnerability', \
    raise_exception=True), name='dispatch')
class MassiveUpload(TemplateView):
    model = Vulnerability
    template_name = 'catalog/upload.html'

    def uploadData(HttpRequest):
        template_name = 'catalog/upload.html'
        #### Unfortunately, decorators do not work here:
        if not HttpRequest.user.is_authenticated:
            return HttpResponseRedirect(reverse(login_url))
        if not HttpRequest.user.has_perm('catalog.add_vulnerability'):
            return HttpResponseForbidden('<h1>403 Forbidden</h1>')

        # https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest.FILES
        try:
            f = HttpRequest.FILES['uploadedFile']
        except:
            return render(HttpRequest, template_name, {'uploaderror': ''})
        try:
            data = f.read()
            json.loads(data)
        except:
            return render(HttpRequest, template_name, {'uploaderror': ''})
        
        result = recoverData(Vulnerability, data)
        if result == 0:
            return HttpResponseRedirect(reverse(success_url))
        else:
            return render(HttpRequest, \
                        template_name, \
                        {'uploaderror': ''})

class RecoverData(TemplateView):
    template_name = 'catalog/recovery.html'
    
    def uploadData(HttpRequest):
        template_name = 'catalog/recovery.html'
        if not HttpRequest.user.is_authenticated:
            return HttpResponseRedirect(reverse(login_url))
        if not HttpRequest.user.is_superuser:
            return HttpResponseForbidden('<h1>403 Forbidden</h1>')
        
        # https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest.FILES
        try:
            f = HttpRequest.FILES['uploadedFile']
        except:
            return render(HttpRequest, template_name, {'uploaderror': ''})
        try:
            data = f.read()
            json.loads(data)
        except:
            return render(HttpRequest, template_name, {'uploaderror': ''})
        
        models_to_recover = [
            Vulnerability,
            RiskQuestions,
            User,
            Permission,
            ContentType,
            Session
        ]
        result = 0
        for i in models_to_recover:
            result = result + recoverData(i, data)
        if result == 0:
            return HttpResponseRedirect(reverse(success_url))
        else:
            return render(HttpRequest, \
                        template_name, \
                        {'recovererror': ''})

