import json
import csv

from django.views.generic import TemplateView
from django.http import HttpRequest, HttpResponse
from django.http import HttpResponseForbidden, HttpResponseRedirect
from django.urls import reverse
from django.shortcuts import render
from django.contrib.auth.decorators import login_required, permission_required
from django.utils.decorators import method_decorator

from .models import Vulnerability


login_url='catalog:login'
success_url='catalog:index'
decorators = [login_required(login_url='catalog:login')]

#########################################################################
#### Warning: requires catalog.add_vulnerability user permission.
#########################################################################
@method_decorator(decorators, name='dispatch')
@method_decorator(permission_required('catalog.add_vulnerability', \
    raise_exception=True), name='dispatch')
class MassiveUpload(TemplateView):
    model = Vulnerability
    template_name = 'catalog/upload.html'

    def getfile(HttpRequest):
        #### Unfortunately, decorators do not work here:
        if not HttpRequest.user.is_authenticated:
            return HttpResponseRedirect(reverse(login_url))
        if not HttpRequest.user.has_perm('catalog.add_vulnerability'):
            return HttpResponseForbidden('<h1>403 Forbidden</h1>')

        # https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpRequest.FILES
        try:
            f = HttpRequest.FILES['uploadedFile']
        except:
            return render(HttpRequest, self.template_name)
        
        # allowed_fields: List of all fields present at model
        models_fields = Vulnerability._meta.get_fields()
        allowed_fields = [i.name for i in models_fields]
        allowed_fields.remove('id')

        data = f.read()
        try:
            json_data = json.loads(data)
            for i in json_data:
                fields = i['fields']
                for j in fields.keys():
                    if not j in allowed_fields:
                        return render(HttpRequest, \
                                      self.template_name, \
                                      {'uploaderror': ""})
        except:
            return render(HttpRequest, \
                          self.template_name, \
                          {'uploaderror': ''})

        #### Else, load data into database. We opted to make an all or none update format.
        for i in json_data:
            fields = i['fields']
            model_data = Vulnerability(**fields)
            model_data.save() 
            
        return HttpResponseRedirect(reverse(success_url))


        