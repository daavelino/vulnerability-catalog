from json import loads as JSONLoads

from django.contrib.auth.decorators import login_required, permission_required
from django.contrib.contenttypes.models import ContentType
from django.contrib.sessions.models import Session
from django.db import transaction
from django.http import HttpRequest, HttpResponse
from django.http import HttpResponseForbidden, HttpResponseRedirect
from django.shortcuts import render
from django.urls import reverse
from django.utils.decorators import method_decorator
from django.views.generic import TemplateView

from .models import Vulnerability, RiskQuestions


login_url='catalog:login'
success_url='catalog:index'
decorators = [login_required(login_url='catalog:login')]

def recoverData(modelName, data):
    ''' 
    Recover data from JSON data to given model. 
    Returns 0, if data was salved at database or 1 if
    data doesn't correspond to database schema.
    '''
    model_fields = modelName._meta.get_fields()
    model_name_str = str(modelName._meta)
    allowed_fields = [i.name for i in model_fields]
    fields = list()

    json_data = JSONLoads(data)
    for i in json_data:
        if i['model'] == model_name_str:
            tmp = i['fields']
            if set(tmp.keys()) > set(allowed_fields):
                return 1
            else:
                fields.append(tmp)
    try:
        with transaction.atomic():
            for i in fields:
                model_data = modelName(**i)
                model_data.save()
    except DatabaseError:
        model_data.active = False
 
    return 0

def removeData(modelName):
    '''
    Removes all objects from a given model from database.
    '''
    modelName.objects.all().delete()

@method_decorator(decorators, name='dispatch')
@method_decorator(permission_required('catalog.add_vulnerability', \
    raise_exception=True), name='dispatch')
class MassiveUpload(TemplateView):
    ''' /catalog/vulnerability/data/json/massiveupload/ '''
    model = Vulnerability
    template_name = 'catalog/upload.html'

    def uploadData(HttpRequest):
        template_name = 'catalog/upload.html'
        #### Unfortunately, decorators do not work here:
        if not HttpRequest.user.is_authenticated:
            return HttpResponseRedirect(reverse(login_url))
        if not HttpRequest.user.has_perm('catalog.add_vulnerability'):
            return HttpResponseForbidden('<h1>403 Forbidden</h1>')

        try:
            f = HttpRequest.FILES['uploadedFile']
        except:
            return render(HttpRequest, template_name, {'uploaderror': ''})
        try:
            data = f.read()
            JSONLoads(data) # Checks if data is JSON'nable'.
        except:
            return render(HttpRequest, template_name, {'uploaderror': ''})
        
        result = recoverData(Vulnerability, data)
        if result == 0:
            return HttpResponseRedirect(reverse(success_url))
        else:
            return render(HttpRequest, \
                        template_name, \
                        {'uploaderror': ''})
