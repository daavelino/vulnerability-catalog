from json import loads as JSONLoads
from time import sleep as TIMESleep

from django.contrib.auth.decorators import login_required, permission_required
from django.contrib.contenttypes.models import ContentType
from django.contrib.sessions.models import Session
from django.db import transaction
from django.db.utils import DatabaseError
from django.http import HttpRequest, HttpResponse
from django.http import HttpResponseForbidden, HttpResponseRedirect
from django.shortcuts import render
from django.urls import reverse
from django.utils.decorators import method_decorator
from django.views.generic import TemplateView

from .models import Vulnerability, RiskQuestions


login_url='catalog:login'
success_url='catalog:index'
decorators = [login_required(login_url='catalog:login')]

def recoverData(modelName, data, savePreview, previewTime):
    ''' 
    Recover data from JSON data to given model. 
    Returns True, if data was salved at database or None if
    data doesn't correspond to database schema.
    '''
    model_fields = modelName._meta.get_fields()
    model_name_str = str(modelName._meta)
    allowed_fields = [i.name for i in model_fields]
    fields = list()
    object_id_list = list()
    allowed_preview_times = [30, 60, 90, 120]
    previewTime = int(previewTime)

    json_data = JSONLoads(data)
    for i in json_data:
        if i['model'] == model_name_str:
            tmp = i['fields']
            if set(tmp.keys()) > set(allowed_fields):
                return None
            else:
                fields.append(tmp)
    
    try:
        with transaction.atomic():
            for i in fields:
                model_data = modelName(**i)
                model_data.save()
                object_id_list.append(model_data.id)
    except DatabaseError:
        model_data.active = False

    if savePreview == 'True':
        if previewTime in allowed_preview_times:
            TIMESleep(previewTime)
        else:
            TIMESleep(30)
        modelName.objects.filter(pk__in=object_id_list).delete()
    
    return True

@method_decorator(decorators, name='dispatch')
@method_decorator(permission_required('catalog.add_vulnerability', \
    raise_exception=True), name='dispatch')
class MassiveUpload(TemplateView):
    ''' /catalog/vulnerability/data/json/massiveupload/ '''
    model = Vulnerability
    template_name = 'catalog/upload.html'

    def uploadData(HttpRequest):
        template_name = 'catalog/upload.html'
        #### Unfortunately, decorators do not work here:
        if not HttpRequest.user.is_authenticated:
            return HttpResponseRedirect(reverse(login_url))
        if not HttpRequest.user.has_perm('catalog.add_vulnerability'):
            return HttpResponseForbidden('<h1>403 Forbidden</h1>')

        try:
            f = HttpRequest.FILES['uploadedFile']
            savePreview = HttpRequest.POST.get('savePreview')
            previewTime = HttpRequest.POST.get('previewTime')
            print(previewTime)
            if savePreview is None:
                savePreview = 'False'
            if previewTime is None:
                previewTime = 0
            print(previewTime)
        except:
            return render(HttpRequest, template_name, {'uploaderror': True})
        try:
            data = f.read()
            JSONLoads(data) # Checks if data is JSON'nable'.
        except:
            return render(HttpRequest, template_name, {'uploaderror': True})
        
        result = recoverData(Vulnerability, data, savePreview, previewTime)
        
        if result is None:
            return render(HttpRequest, \
                        template_name, \
                        {'uploaderror': True})
        else:
            return render(HttpRequest, template_name, \
                          { 'uploaderror':False,
                            'savepoint':result})
        