/* 
home-generator.js:
Get data and generate the graphical elements to home page.
*/

var scoreLabels = [
// [Label, class attribute]  
  ["Mitigated","btn btn-md btn-outline-info"],
  ["Not identified","btn btn-md btn-outline-warning"],
  ["Notified","btn btn-md btn-outline-secondary"],
  ["Risk accepted","btn btn-md btn-outline-secondary"],
  ["Solved","btn btn-md btn-success"]
];
var unsolvedLabels = ["Not identified",
                      "Notified",
                      "Mitigated"];
     
var riskLabels = [
// [Label, class attribute]
  ["High","progress-bar bg-danger"],
  ["Medium","progress-bar bg-warning"],
  ["Low","progress-bar bg-secondary"],
  ["Not evaluated","progress-bar bg-dark"]
];
var searchPageUrl = "/catalog/vulnerability/search/";

/* Risk warning: */
url = "/catalog/vulnerability/data/json/filter/?field=risk"
var data;
var matchValue = "Not evaluated";
d3.json(url, function(d) {
  data = d;
  for (var i in data) {
    let field = data[i].risk;
    let value = data[i].vulnerabilities;
    if (field == matchValue) {
      var bar = d3.select("#riskWarning")
          .append("div")         
            .attr("class","container")
          .append("div")
          .attr("id","riskWarningMessage")
            .style("cursor","pointer")
            .attr("class","alert alert-warning alert-dismissible fade show")
          .append("button")
            .attr("type","button")
            .attr("class","close")
            .attr("data-dismiss","alert")
            .text("x");
        bar = d3.select("#riskWarningMessage")
            .append("strong")
            .text("Warning! ")
            .append("span")
            .text("Some vulnerability risks where not evaluated. Click to check.")
            .on("click", function() {
              postSearchData("Risk", 
                             "__contains=",
                             "\"Not evaluated\"" , 
                             searchPageUrl);
                            });
      break;

    }

  }
})


/* Risk bar: */
// updating the progress-bar elements: //
url = "/catalog/vulnerability/data/json/filter/?field=risk";
var data;
d3.json(url, function(d) {
    data = d;
    var totalVuls = parseInt(document.getElementById("countOfVulnerabilities").innerText);
    
  //Label:
  //Updated using Django {{ vulnerability_list.count }} at template page.
  for (var i in data) {
    var field = data[i].risk;
    var value = data[i].vulnerabilities;
    
    // updating the progrees bar attributes:
    var bar = d3.select("#riskBar")
        .attr("class", "progress")
        .append("div")
        .style("cursor","pointer")
        .attr("class", function() {
          for (var i = 0; i < riskLabels.length; i ++) {
            if (field == riskLabels[i][0]) {
              return riskLabels[i][1];
            }
          }
        })
        .style("width", function() { return (value/totalVuls)*100 + "%"; })
        .append("span") // https://stackoverflow.com/questions/25042697
        .attr("data-toggle", "popover")
        .attr("data-placement", "bottom")
        .attr("data-trigger", "focus")
        .attr("data-content", "<span style=\"cursor:pointer;\"" 
                              + "onclick=\'postSearchData(\"risk\""
                              + ","
                              + "\"__contains=\""
                              + ","
                              + "\"\\\"" + field + "\\\"\""
                              + ","
                              + "\"" + searchPageUrl + "\""
                              + ")\'>" 
                              + value 
                              + "</span>")
        .attr("data-html", "true")
        .text(field);
  }
});
/* Loading the popover only form #riskBar */
$("#riskBar").popover({
  selector: "[data-toggle='popover']",
  container: "body"
});
/* End of Risk bar: */

/* Score bar: */
url = "/catalog/vulnerability/data/json/filter/?field=status&countby=risk"
var data;
d3.json(url, function(d) {
  data = d;
  var pendingToSolve = 0;

  // Risk Labels:
  var bar = d3.select("#scoreBar")
              .append("h3")
              .text("Score: ");

  //Generating 'hidden' attribute values:
  for (var i in data) {
    var field = data[i].status;
    var risk = data[i].risk;
    var tmp = Object.values(risk);
    var value = d3.sum(tmp);
    var tip = JSON.stringify(risk)
                  .replace(/{/g, "")
                  .replace(/}/g, "")
                  .replace(/\"/g, "")
                  .replace(/\:/g, "\: ")
                  .replace(/\,/g, "\, ");
  
    // Counting the volume of vuls that requires attention.
    if (unsolvedLabels.indexOf(field) != -1) { // field is at unsolvedLabels[].
      pendingToSolve = pendingToSolve + value;
    }

    // updating the Score bar attributes:
    bar = d3.select("#scoreBar")
        .attr("class", "btn-group-vertical")
        .append("button")
        .attr("class", function() {
          for (var i=0; i < scoreLabels.length; i++) {
            if (field == scoreLabels[i][0]) {
              return scoreLabels[i][1];
            }
          }
        })
        .attr("data-toggle", "collapse")
        .attr("data-target", "#text" + i)
        .text(field + ": " + value);

    var text = d3.select("#scoreBar")
        .append("div")
        .attr("id", "text" + i)
        .attr("class", "collapse")
        .style("cursor","pointer")
        .append("small")
        .append("span")
        .text(tip);

        if (field == scoreLabels[0][0]) {
          text.on("click", function() {
            postSearchData("Status", 
                           "__contains=", 
                           "\"" + scoreLabels[0][0] + "\"" , 
                           searchPageUrl);
          });
        } else if (field == scoreLabels[1][0]) {
          text.on("click", function() {
            postSearchData("Status", 
                           "__contains=", 
                           "\"" + scoreLabels[1][0] + "\"", 
                           searchPageUrl);
          });
        } else if (field == scoreLabels[2][0]) {
          text.on("click", function() {
            postSearchData("Status", 
                           "__contains=", 
                           "\"" + scoreLabels[2][0] + "\"", 
                           searchPageUrl);
          });
        } else if (field == scoreLabels[3][0]) {
          text.on("click", function() {
            postSearchData("Status", 
                           "__contains=", 
                           "\"" + scoreLabels[3][0] + "\"", 
                           searchPageUrl);
          });
        } else if (field == scoreLabels[4][0]) {
          text.on("click", function() {
            postSearchData("Status", 
                           "__contains=", 
                           "\"" + scoreLabels[4][0] + "\"", 
                           searchPageUrl);
          });
        }
  };
/* End of Score bar: */

/* WaitingForSolution bar: */

  // Label:
  var bar = d3.select("#waitingForSolutionBar")
              .style("cursor","pointer")
              .append("h4")
              .text("Waiting for solution: ");

  if (pendingToSolve > 10) {
  bar = d3.select("#waitingForSolutionBar")
              .append("h2")
              .append("span")
              .style("color","DeepPink")
              .append("strong")
              .text(pendingToSolve);      
 } else {
  bar = d3.select("#waitingForSolutionBar")
              .append("span")
              .style("color","LightGrey")
              .append("strong")
              .text(pendingToSolve);
 }
  bar = d3.select("#waitingForSolutionBar")
              .on("click", function() {
                var tmp = unsolvedLabels.toString(); 
                postSearchData(
                 "Status", 
                 "__in=", 
                 "[\"" + tmp.replace(",", "\",\"") + "\"]",
                searchPageUrl);
                })
              .append("span")
              .style("text-align", "justify")
              .append("span")
              .text(" vulnerabilities are waiting for solution. Please, check at ")
              .append("strong")
              .text(function() {
                var sizeArray = unsolvedLabels.length;
                if (sizeArray < 2) {
                  return String(unsolvedLabels[0]);
                }
                var result = "";
                for (var i = 0; i < unsolvedLabels.length - 1; i++) {
                   result = result + String(unsolvedLabels[i] + ", ");
                }
                result = result + " and " + String(unsolvedLabels[sizeArray - 1]);
                return result;
              });

  bar = d3.select("#waitingForSolutionBar")
              .append("span")
              .append("small")
              .text(" categories.");

  bar = d3.select("#scoreBar")
              .append("br");
});
/* End of WaitingForSolution bar: */

/* Deadline bar: */
url = "/catalog/vulnerability/data/json/filter/?field=status&countby=remediation_deadline"

var data;
var today = new Date();
var todayStr = today.getFullYear() + "-" + today.getMonth() + "-" + today.getDate();
var count = 0;

// Label:
var bar = d3.select("#deadlineBar")
            .style("cursor","pointer")
            .append("h4")
            .text("Deadlines status:");

d3.json(url, function(d) {
  data = d;
  var deadlineNotification = false;

  // counting the number of expired remediation_dates:
  for (var i in data) {
    var field = data[i].status;

    if (field == "Not identified" || field == "Notified") {
      deadlineNotification = true;
      var deadline = data[i].remediation_deadline;
      var dateArray = Object.keys(deadline);
      var dateValues = Object.values(deadline);
      var tmp1 = [];
      var tmp2 = [];
      // counting the expired deadline:
      for (var i = 0; i < dateArray.length; i++) {
        if (Date.parse(dateArray[i]) < today ) {
          tmp1.push(dateArray[i]);
          tmp2.push(dateValues[i]);
        }
      }
      count = count + d3.sum(tmp2);
    }
  }

  // updating Deadline Bar:
  if (deadlineNotification) {
    
    if (count > 10) {
      bar = d3.select("#deadlineBar")
          .append("span")
          .style("color","DeepPink")
          .append("strong")
          .text(count);
    } else {
      bar = d3.select("#deadlineBar")
          .append("span")
          .style("color","LightGrey")
          .append("strong")
          .text(count);
    }
    
    bar = d3.select("#deadlineBar")
            .on("click", function() {
              postSearchData(
                "remediation_deadline", 
                "__lt=", 
                "\"" + todayStr + "\" status__in=[\"Not identified\",\"Notified\"]",
                searchPageUrl);
            }
           )
        .append("span")
        .text(" unsolved vulnerabilities have ")
        .append("strong")
        .text("missed the remediation deadline.");
    }
});

/* End of Deadline bar: */

/* End of home-generator.js */