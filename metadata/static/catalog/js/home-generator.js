/* 
home-generator.js:
Get data and generate the graphical elements to home page.
*/

var scoreLabels = ["Mitigated",  
                   "Not identified",
                   "Notified", 
                   "Risk accepted", 
                   "Solved"];
var unsolvedLabels = ["Not identified",
                      "Notified",
                      "Mitigated"];
var searchPageUrl = "/catalog/vulnerability/search/";

/* Vulnerability bar: */
// updating the progress-bar elements: //
url = "/catalog/vulnerability/data/json/filter/?field=risk";
var data;
d3.json(url, function(d) {
    data = d;

  //Label:
  //Updated using Django {{ vulnerability_list.count }} at template page.
  for (var i in data) {
    var field = data[i].risk;
    var value = data[i].vulnerabilities;
       
    // updating the progrees bar attributes:
    var bar = d3.select("#vulnerabilityBar")
        .attr("class", "progress")
        .append("div")
        .attr("class", function() { if (field == "High") {
                                         return "progress-bar bg-danger"
                                     } else if (field == "Medium") {
                                         return "progress-bar bg-warning"
                                     } else if (field == "Low") {
                                         return "progress-bar bg-secondary"
                                   } })
        .style("width", function() { return value + "%"; })
        .append("span") // https://stackoverflow.com/questions/25042697
        .attr("data-toggle", "popover")
        .attr("data-placement", "bottom")
        .attr("data-trigger", "focus")
        .attr("data-content", "<span onclick=\'postSearchData(\"risk\"," 
                              + "\"__contains=\","
                              + "\"" + field +"\","
                              + "\"/catalog/vulnerability/search/\""
                              + ")\'>" 
                              + value 
                              + "</span>")
        .attr("data-html", "true")
        .text(field);
  }

});
/* Loading the popover only form #vulnerabilityBar */
$("#vulnerabilityBar").popover({
  selector: "[data-toggle='popover']",
  container: "body"
});
/* End of Vulnerability bar: */

/* Score bar: */
url = "/catalog/vulnerability/data/json/filter/?field=status&countby=risk"
var data;
d3.json(url, function(d) {
  data = d;
  var pendingToSolve = 0;

  // Label:
  var bar = d3.select("#scoreBar")
              .append("h3")
              .text("Score: ");

  //Generating 'hidden' attribute values:
  for (var i in data) {
    var field = data[i].status;
    var risk = data[i].risk;
    var tmp = Object.values(risk);
    var value = d3.sum(tmp);
    var tip = JSON.stringify(risk)
                  .replace(/{/g, "")
                  .replace(/}/g, "")
                  .replace(/\"/g, "")
                  .replace(/\:/g, "\: ")
                  .replace(/\,/g, "\, ");
  
    // Counting the volume of vuls that requires attention.
    if (field == unsolvedLabels[0] 
        || field == unsolvedLabels[1] 
        || field == unsolvedLabels[2]) {
      pendingToSolve = pendingToSolve + value;
    }

    // updating the Score bar attributes:
    bar = d3.select("#scoreBar")
        .attr("class", "btn-group-vertical")
        .append("button")
        .attr("class", function() { if (field == scoreLabels[0]) {
                                        return "btn btn-md btn-outline-info"
                                    } else if (field == scoreLabels[1]) {
                                        return "btn btn-md btn-outline-warning"
                                    } else if (field == scoreLabels[2]) {
                                        return "btn btn-md btn-outline-secondary"
                                    } else if (field == scoreLabels[3]) {
                                        return "btn btn-md btn-outline-secondary"
                                    } else if (field == scoreLabels[4]) {
                                        return "btn btn-md btn-success"
                                    } 
                       })
        .attr("data-toggle", "collapse")
        .attr("data-target", "#text" + i)
        .text(field + ": " + value);

    var text = d3.select("#scoreBar")
        .append("div")
        .attr("id", "text" + i)
        .attr("class", "collapse")
        .append("small")
        .append("span")
        .text(tip);

        if (field == scoreLabels[0]) {
          text.on("click", function() {
            postSearchData("Status", "__contains=", "\"" + scoreLabels[0] + "\"" , searchPageUrl);
          });
        } else if (field == scoreLabels[1]) {
          text.on("click", function() {
            postSearchData("Status", "__contains=", "\"" + scoreLabels[1] + "\"", searchPageUrl);
          });
        } else if (field == scoreLabels[2]) {
          text.on("click", function() {
            postSearchData("Status", "__contains=", "\"" + scoreLabels[2] + "\"", searchPageUrl);
          });
        } else if (field == scoreLabels[3]) {
          text.on("click", function() {
            postSearchData("Status", "__contains=", "\"" + scoreLabels[3] + "\"", searchPageUrl);
          });
        } else if (field == scoreLabels[4]) {
          text.on("click", function() {
            postSearchData("Status", "__contains=", "\"" + scoreLabels[4] + "\"", searchPageUrl);
          });
        }
  };
/* End of Score bar: */

/* Remaining bar: */

  // Label:
  var bar = d3.select("#remainingBar")
              .append("h4")
              .text("Waiting for solution: ");

  if (pendingToSolve > 10) {
  bar = d3.select("#remainingBar")
              .append("h2")
              .append("span")
              .attr("style","color:DeepPink")
              .append("strong")
              .text(pendingToSolve);
              
 } else {
  bar = d3.select("#remainingBar")
              .append("h4")
              .append("span")
              .attr("style","color:LightGrey")
              .append("strong")
              .text(pendingToSolve);
 }
  bar = d3.select("#remainingBar")
              .on("click", function() {
                postSearchData(
                 "Status", 
                 "__in=", 
                 "[\"" + unsolvedLabels[0] + "\"," + "\"" + unsolvedLabels[1] + "\"" + "\"" + unsolvedLabels[2] + "\"]",
                searchPageUrl);
                })
              .append("span")
              .style("text-align", "justify")
              .append("small")
              .text(" vulnerabilities are waiting for solution. Please, check at ")
              .append("strong")
              .text(function() {
                var sizeArray = unsolvedLabels.length;
                if (sizeArray < 2) {
                  return String(unsolvedLabels[0]);
                }
                var result = "";
                for (var i = 0; i < unsolvedLabels.length - 1; i++) {
                   result = result + String(unsolvedLabels[i] + ", ");
                }
                result = result + " and " + String(unsolvedLabels[sizeArray - 1]);
                return result;
              });

  bar = d3.select("#remainingBar")
              .append("span")
              .append("small")
              .text("categories.");

  bar = d3.select("#scoreBar")
              .append("br");
});
/* End of Summary bar: */

/* Deadline bar: */
url = "/catalog/vulnerability/data/json/filter/?field=status&countby=remediation_deadline"

var data;
var today = new Date();
var todayStr = today.getFullYear() + "-" + today.getMonth() + "-" + today.getDay();
var count = 0;

// Label:
var bar = d3.select("#deadlineBar")
            .append("h4")
            .text("Deadlines status:");

d3.json(url, function(d) {
  data = d;

  // counting the number of expired remediation_dates:
  for (var i in data) {
    var field = data[i].status;

    if (field == "Not identified" || field == "Notified") {
      var deadline = data[i].remediation_deadline;
      var dateArray = Object.keys(deadline);
      var dateValues = Object.values(deadline);
      var tmp1 = [];
      var tmp2 = [];
      // counting the expired deadline:
      for (var i = 0; i < dateArray.length; i++) {
        if (Date.parse(dateArray[i]) < today ) {
          tmp1.push(dateArray[i]);
          tmp2.push(dateValues[i]);
        }
      }
      count = count + d3.sum(tmp2);
    }
  }

  // updating Remediation Bar:
  if (count > 10) {
    bar = d3.select("#deadlineBar")
        .append("span")
        .attr("style","color:DeepPink")
        .append("strong")
        .text(count);
  } else {
    bar = d3.select("#deadlineBar")
        .append("span")
        .attr("style","color:LightGrey")
        .text(count);
  }
  bar = d3.select("#deadlineBar")
          .on("click", function() {
            postSearchData(
              "remediation_deadline", 
              "__lt=", 
              "\"" + todayStr + "\" status__in=[\"Not identified\",\"Notified\"]",
              searchPageUrl);
            }
         )
      .append("span")
      .text(" unsolved vulnerabilities have missed the remediation deadline.");
});

/* End of Deadline bar: */

/* End of home-generator.js */