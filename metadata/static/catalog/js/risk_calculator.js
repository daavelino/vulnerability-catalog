/*
  risk_calculator.js:

  A simple risk calculator for Vulnerability Catalog project.
  Notice that this script is designed to be applied at
  
  metadata/templates/risk_custom_content.html 
  
  HTML skeleton, so check it together for better understoding.
  Notice also that some data are coming from Django database so 
  pay special attention at this particularity.
*/

function riskCalculator() {
  
    var riskMetric; // The metric of all risk values presented by the user.
    var riskVector = {}; // Get all the provided risk metrics.
    var numberOfQuestions; // Number of questions in the form.
    var maxRiskLevel = {}; // This should be one of ["High", "Medium", "Low"]
    
    // Creating the initial riskVector:
    let riskQuestionsCollection = document.getElementsByClassName("risk-question");
    let riskValueCollection = document.getElementsByClassName("risk-value");
    
    numberOfQuestions = riskQuestionsCollection.length;
    for (let i=0; i<numberOfQuestions; i++) {
      riskVector[riskQuestionsCollection[i].id] = riskQuestionsCollection[i].valueAsNumber;
    }
    
    // Adding all values:
    riskMetric = Object.values(riskVector).reduce((a, b) => a + b, 0);

    // Calculating the risk level beyond it risk level changes:
    let maxValue = 10 * numberOfQuestions;
    maxRiskLevel["Low"] = maxValue / 4;
    maxRiskLevel["Medium"] = 2*(maxValue / 4);
    maxRiskLevel["High"] = 3*(maxValue / 4);
    maxRiskLevel["Critical"] = maxValue;
    
    // If an unique measure is 10, risk level is Critical:
    if ( 
      Object.values(riskVector).some(
        function(element, index, array) { return element == 10; })
      ) 
    {
      riskLevel = "Critical";
    } else if ( // If an unique measure is at (7, 10), risk level is High:
      Object.values(riskVector).some(
        function(element, index, array) { return element > 7; })
      ) 
    {
      riskLevel = "High";
    } else if ( // If an unique measure is great than 4, risk level is Medium:
      Object.values(riskVector).some(
        function(element, index, array) { return element > 4; })
      ) 
    {
      riskLevel = "Medium";    
    } else { // risk level depends on the evaluation of all fields:
      if (0 <= riskMetric && riskMetric <= maxRiskLevel["Low"]) {
        riskLevel = "Low";
      }
      if (maxRiskLevel["Low"] < riskMetric && riskMetric <= maxRiskLevel["Medium"]) {
        riskLevel = "Medium";
      }
      if (maxRiskLevel["Medium"] < riskMetric && riskMetric <= maxRiskLevel["High"]) {
        riskLevel = "High";
      }
      if (riskMetric == maxRiskLevel["High"]) {
        riskLevel = "Critical";
      }
    }

    // Presenting the Risk level as percentage:  
    document.getElementById("riskMetric")
              .innerHTML = (riskMetric * 2) + "% <small><small><span class='text-muted'>of all listed concerns.</span></small></small>";
    document.getElementById("riskLevel").innerHTML = riskLevel;
      
    // setting Risk colors by level:
    if (riskLevel == "Critical") {
      document.getElementById("riskLevel")
              .setAttribute("class", "badge badge-dark");
    } 
    else if (riskLevel == "High") {
      document.getElementById("riskLevel")
              .setAttribute("class", "badge badge-danger");
    }
    else if (riskLevel == "Medium") {
      document.getElementById("riskLevel")
              .setAttribute("class", "badge badge-warning");
    } 
    else if (riskLevel == "Low") {
      document.getElementById("riskLevel")
              .setAttribute("class", "badge badge-secondary");
    } else {
      document.getElementById("riskLevel")
              .setAttribute("class", "badge badge-secondary");
    }

    // Presenting the risk vector: 
    let rv = "RV: " + JSON.stringify(riskVector);
    document.getElementById("riskVectorLabel")
            .innerHTML = ("Risk vector string - ")
    document.getElementById("riskVectorValue")
            .innerHTML = (rv);

//    console.log(riskVector);
//    console.log(riskMetric);
//    console.log(riskLevel);
}